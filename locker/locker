#!/usr/local/bin/python3

import sys
import os
from os.path import expanduser


def print_b(input, display = True):
    #print bold text
    if display:
        sys.stdout.write('\033[1m' + input + '\033[0m')
    return('\033[1m' + input + '\033[0m')

def print_u(input, display = True):
    #print underline text
    if display:
        sys.stdout.write('\033[4m' + input + '\033[0m')
    return('\033[4m' + input + '\033[0m')

def print_p(input, display = True):
    #print purple text
    if display:
        sys.stdout.write('\033[95m' + input  + '\033[0m')
    return('\033[95m' + input  + '\033[0m')


def print_b(input, display = True):
    #print blue text
    if display:
        sys.stdout.write('\033[94m' + input  + '\033[0m')
    return('\033[94m' + input  + '\033[0m')

def print_o(input, display = True):
    #print orange text
    if display:
        sys.stdout.write('\033[93m' + input  + '\033[0m')
    return('\033[93m' + input  + '\033[0m')

def displayHelp():
    print_b(print_p(print_u("\nLocker - Simple dotfile storage.\n", False), False))
    print("     -h, --help   : Display this help text.")
    print("     -o           : Force overwrite of dotfiles.")
    print("     -b           : Backup existing files.")
    print("                       Overrides -o ")
    print("\n\n")




def main(argv):
    writepath = expanduser("~") + '/writetest'
    overwrite = False
    backup = False

    if '--help' in argv or '-h' in argv:
        displayHelp()
        return None

    if '-o' in argv:
        overwrite = True

    if '-b' in argv:
        backup = True

    # Display the introduction

    print_b(print_p(print_u("\nLocker - Simple dotfile storage.\n\n", False), False))

    # position in the directory below the locker script
    scriptPath = os.path.dirname(os.path.realpath(__file__))
    os.chdir(scriptPath)
    os.chdir('../')
    cwd = os.getcwd()



    # get the directory listing
    data = os.listdir()
    # remove the "locker" directory from the directory listing
    data.remove('locker')
    print_o('Ready to do the damn thing? (y/n) ')
    

    if(yes_or_no('')):
        print_b(print_p("Beginning linking dotfiles...\n"), False)
        # Begin linking files...
        for x in range(len(data)):
            # look through files for *.link and create symlinks
            # for those files.
            linkFile(data[x], cwd, overwrite, backup, writepath)
    
        #if it's a mac, let's install homebrew.
        mac_specific()

        sys.stdout.write('\n')
    else:
        print_o('Well then, what are you here for?\n\n')
    


def linkFile(filename, cwd, overwrite, backup, writepath):

    # check to see if file exists.
    parts = filename.split('.')
    # is a file to be linked
    if parts[1] == 'link':
        
        print_b("Linking File: ")
        sys.stdout.write(filename + '\n')
        if os.path.exists(writepath + "/." + parts[0]): 
            # file already exists, but is it a symlink already?
            # and if so, is it the right symlink?
            if os.path.islink(writepath + "/." + parts[0]) and os.path.realpath(writepath + "/." + parts[0]): 
                # it's the right symlink, just remove it!
                os.remove(writepath + "/." + parts[0])
                os.symlink(cwd + '/' + filename, writepath + '/.' + parts[0])
                print_p('     Replaced existing symlink.\n')
                return None

            if backup:
                os.rename(writepath + '/.' + parts[0], writepath + '/.' + parts[0] + ".backup")
                print_p('     Backed up existing file.\n')
                os.symlink(cwd + '/' + filename, writepath + '/.' + parts[0])

            elif overwrite:
                print_o('     Replaced existing file.\n')
                os.remove(writepath + '/.' + parts[0])
                os.symlink(cwd + '/' + filename, writepath + '/.' + parts[0])
            else:
                print_o('     File exists, skipping.\n')
        else:
            os.symlink(cwd + '/' + filename, writepath + '/.' + parts[0])

def mac_specific():

    if os.popen('uname -s').read() == "Darwin\n":
        print_p('It appears this is a Mac, would you like to install homebrew? (y/n): ')
        if yes_or_no(''):
            if os.popen('which brew').read() == 'brew not found\n':
                print_o('\nOops, it appears Homebrew is already installed at \'' + os.popen('which brew').read()[:-1] + '\'.')
            else:
                # Homebrew is not installed, install it...
                print_o('NOTE:  Installing homebrew will require administrator privs, and you will need to enter your password.\n Are you okay with this? (y/n): ')
                if yes_or_no('') == False:
                    print_p('Okay, you can install manually later from: https://brew.sh')
                else:
                    os.system('curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install | ruby')

            
def yes_or_no(answer):
    yes = set(['yes','y', 'ye'])
    no = set(['no','n'])
     
    while True:
        choice = input(answer).strip().lower()
        if choice in yes:
            return True
        elif choice in no:
            return False

        else:
            print_o("Please respond with 'yes' or 'no' (y/n): ")
            return yes_or_no('')


main(sys.argv)
